import os
from urllib.parse import quote, unquote
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = "TOKEN_BOT"
ROOT_DIR = "library"  # –ü–∞–ø–∫–∞, –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è "–ú–§ –ú–ì–¢–£"

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–∞–ø–∫–∏
def build_keyboard(current_path: str):
    abs_path = os.path.join(ROOT_DIR, current_path)
    entries = os.listdir(abs_path)
    entries.sort()

    keyboard = []
    for entry in entries:
        full_entry_path = os.path.join(abs_path, entry)
        encoded_path = quote(os.path.join(current_path, entry))
        if os.path.isdir(full_entry_path):
            keyboard.append([InlineKeyboardButton(f"üìÅ {entry}", callback_data=f"nav|{encoded_path}")])
        else:
            keyboard.append([InlineKeyboardButton(f"üìÑ {entry}", callback_data=f"file|{encoded_path}")])

    # –ù–∞–∑–∞–¥
    if current_path:
        parent_path = os.path.dirname(current_path)
        encoded_parent = quote(parent_path)
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"nav|{encoded_parent}")])

    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = build_keyboard("")
    await update.message.reply_text("üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("nav|"):
        path = unquote(data[4:])
        keyboard = build_keyboard(path)
        await query.edit_message_text(f"üìÅ –ü–∞–ø–∫–∞: `{path or '–ú–§ –ú–ì–¢–£'}`", parse_mode="Markdown", reply_markup=keyboard)

    elif data.startswith("file|"):
        rel_path = unquote(data[5:])
        abs_path = os.path.join(ROOT_DIR, rel_path)

        if os.path.isfile(abs_path):
            try:
                await query.message.reply_document(document=open(abs_path, "rb"))
            except Exception as e:
                await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:\n{e}")
        else:
            await query.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ —Ñ–∞–π–ª.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.run_polling()

if __name__ == "__main__":
    main()
